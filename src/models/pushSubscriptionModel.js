const pool = require('../config/db');

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å push –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.savePushSubscription = async (userId, subscription, latitude, longitude) => {
    try {
        const subscriptionJson = JSON.stringify(subscription);
        
        const [existing] = await pool.query(
            'SELECT id FROM user_push_subscriptions WHERE user_id = ? AND endpoint = ?',
            [userId, subscription.endpoint]
        );

        if (existing.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            await pool.query(
                'UPDATE user_push_subscriptions SET subscription = ?, latitude = ?, longitude = ?, updated_at = NOW() WHERE user_id = ? AND endpoint = ?',
                [subscriptionJson, latitude, longitude, userId, subscription.endpoint]
            );
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            await pool.query(
                'INSERT INTO user_push_subscriptions (user_id, subscription, endpoint, latitude, longitude, created_at) VALUES (?, ?, ?, ?, ?, NOW())',
                [userId, subscriptionJson, subscription.endpoint, latitude, longitude]
            );
        }

        console.log(`‚úÖ Push –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ push –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        throw error;
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
exports.getSubscriptionsByCoordinates = async (latitude, longitude, radiusKm = 1) => {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–ø–ª—é—Å-–º–∏–Ω—É—Å radiusKm –∫–º)
        const latDelta = radiusKm / 111; // 1 –≥—Ä–∞–¥—É—Å —à–∏—Ä–æ—Ç—ã ‚âà 111–∫–º
        const lonDelta = radiusKm / (111 * Math.cos(latitude * Math.PI / 180));

        const [subscriptions] = await pool.query(
            `SELECT user_id, subscription, latitude, longitude 
             FROM user_push_subscriptions 
             WHERE latitude BETWEEN ? AND ? 
             AND longitude BETWEEN ? AND ?
             AND subscription IS NOT NULL`,
            [
                latitude - latDelta,
                latitude + latDelta,
                longitude - lonDelta,
                longitude + lonDelta
            ]
        );

        console.log(`üìç –ù–∞–π–¥–µ–Ω–æ ${subscriptions.length} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç`);
        return subscriptions;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        throw error;
    }
};

// –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞)
exports.deleteSubscription = async (userId, endpoint) => {
    try {
        await pool.query(
            'DELETE FROM user_push_subscriptions WHERE user_id = ? AND endpoint = ?',
            [userId, endpoint]
        );

        console.log(`üóëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        throw error;
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getUserSubscriptions = async (userId) => {
    try {
        const [subscriptions] = await pool.query(
            'SELECT subscription FROM user_push_subscriptions WHERE user_id = ? AND subscription IS NOT NULL',
            [userId]
        );

        return subscriptions.map(s => JSON.parse(s.subscription));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    }
};