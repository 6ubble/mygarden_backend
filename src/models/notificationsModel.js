const pool = require('../config/db');

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.saveNotification = async (userId, title, body, type, data = null) => {
    try {
        const dataJson = data ? JSON.stringify(data) : null;
        
        const [result] = await pool.query(
            'INSERT INTO notifications (user_id, title, body, type, data) VALUES (?, ?, ?, ?, ?)',
            [userId, title, body, type, dataJson]
        );

        console.log(`üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return result.insertId;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        throw error;
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getUserNotifications = async (userId, limit = 50, offset = 0) => {
    try {
        const [notifications] = await pool.query(
            `SELECT id, title, body, type, data, is_read, created_at 
             FROM notifications 
             WHERE user_id = ? 
             ORDER BY created_at DESC 
             LIMIT ? OFFSET ?`,
            [userId, limit, offset]
        );

        return notifications.map(n => ({
            ...n,
            is_read: n.is_read ? true : false,
            data: typeof n.data === 'string' ? JSON.parse(n.data) : n.data
        }));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        throw error;
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
exports.getUnreadNotifications = async (userId) => {
    try {
        const [notifications] = await pool.query(
            `SELECT id, title, body, type, data, created_at 
             FROM notifications 
             WHERE user_id = ? AND is_read = FALSE 
             ORDER BY created_at DESC`,
            [userId]
        );

        return notifications.map(n => ({
            ...n,
            data: n.data ? JSON.parse(n.data) : null
        }));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        throw error;
    }
};

// –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
exports.markAsRead = async (notificationId) => {
    try {
        await pool.query(
            'UPDATE notifications SET is_read = TRUE, read_at = NOW() WHERE id = ?',
            [notificationId]
        );

        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        throw error;
    }
};

// –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
exports.markAllAsRead = async (userId) => {
    try {
        const [result] = await pool.query(
            'UPDATE notifications SET is_read = TRUE, read_at = NOW() WHERE user_id = ? AND is_read = FALSE',
            [userId]
        );

        console.log(`‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ ${result.affectedRows} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
        return result.affectedRows;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        throw error;
    }
};

// –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
exports.deleteNotification = async (notificationId) => {
    try {
        await pool.query(
            'DELETE FROM notifications WHERE id = ?',
            [notificationId]
        );

        console.log(`üóëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId} —É–¥–∞–ª–µ–Ω–æ`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        throw error;
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
exports.getUnreadCount = async (userId) => {
    try {
        const [result] = await pool.query(
            'SELECT COUNT(*) as count FROM notifications WHERE user_id = ? AND is_read = FALSE',
            [userId]
        );

        return result[0].count;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
        throw error;
    }
};