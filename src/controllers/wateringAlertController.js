const axios = require('axios');
const cron = require('node-cron');
const webpush = require('web-push');
const { getSubscriptionsByCoordinates } = require('../models/pushSubscriptionModel');
const { getTomorrowNightInLocalTimezone, convertToLocalTime, getTimezoneByCoordinates } = require('../utils/timezoneUtils');
const { checkHeatWarning, checkRainWarning, getWateringRecommendation } = require('../utils/weatherAlertsUtils');
require('dotenv').config();

const OPENWEATHER_API_KEY = process.env.OPENWEATHER_API_KEY;

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª–∏–≤–µ
const wateringAlertCache = new Map();

// –ê–∫—Ç–∏–≤–Ω—ã–µ cron –∑–∞–¥–∞—á–∏
const wateringCronTasks = new Map();

class AppError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
const getTimezoneByCoords = (lat, lon) => {
    try {
        const tzlookup = require('tzlookup');
        return tzlookup(lat, lon) || 'UTC';
    } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: ${error.message}`);
        return 'UTC';
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
const fetchTomorrowForecast = async (lat, lon) => {
    try {
        const response = await axios.get(
            `https://api.openweathermap.org/data/2.5/forecast`,
            {
                params: {
                    lat,
                    lon,
                    appid: OPENWEATHER_API_KEY,
                    units: 'metric',
                    lang: 'ru'
                },
                timeout: 10000
            }
        );

        const timezone = getTimezoneByCoords(lat, lon);

        // –ü–æ–ª—É—á–∞–µ–º Unix timestamps –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è (00:00 - 23:59)
        const now = new Date();
        const tomorrowStart = new Date(now);
        tomorrowStart.setDate(tomorrowStart.getDate() + 1);
        tomorrowStart.setHours(0, 0, 0, 0);
        
        const tomorrowEnd = new Date(tomorrowStart);
        tomorrowEnd.setHours(23, 59, 59, 999);

        const startUnix = Math.floor(tomorrowStart.getTime() / 1000);
        const endUnix = Math.floor(tomorrowEnd.getTime() / 1000);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        const tomorrowForecasts = response.data.list.filter(item => {
            return item.dt >= startUnix && item.dt <= endUnix;
        });

        if (tomorrowForecasts.length === 0) {
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∞—Ä—É –∏ –¥–æ–∂–¥—å
        const heat = checkHeatWarning(tomorrowForecasts);
        const rain = checkRainWarning(tomorrowForecasts);
        const recommendation = getWateringRecommendation(heat, rain);

        return {
            city: response.data.city.name,
            timezone,
            heat,
            rain,
            recommendation,
            timestamp: Date.now()
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ø–æ–ª–∏–≤–∞: ${error.message}`);
        throw error;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ
const checkAndNotifyWatering = async (lat, lon) => {
    try {
        const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
        const forecast = await fetchTomorrowForecast(lat, lon);

        if (!forecast) {
            console.log(`‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è ${cacheKey}`);
            return null;
        }

        wateringAlertCache.set(cacheKey, forecast);

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (forecast.rain.isRain) {
            console.log(`üåßÔ∏è –î–û–ñ–î–ò–ö: –í ${forecast.city} –∑–∞–≤—Ç—Ä–∞ ${forecast.rain.totalRain}–º–º –æ—Å–∞–¥–∫–æ–≤`);
        } else if (forecast.heat.isHeat) {
            console.log(`‚òÄÔ∏è –ñ–ê–†–ê: –í ${forecast.city} –∑–∞–≤—Ç—Ä–∞ –¥–æ ${forecast.heat.maxTemp}¬∞C`);
        } else {
            console.log(`‚úÖ –û–±—ã—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –≤ ${forecast.city}`);
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (forecast.recommendation.recommendation) {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É: "${forecast.recommendation.emoji}"`);
            await sendWateringNotification(forecast, lat, lon);
        }

        return forecast;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª–∏–≤–∞: ${error.message}`);
        throw error;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ
const sendWateringNotification = async (forecast, lat, lon) => {
    try {
        const subscriptions = await getSubscriptionsByCoordinates(lat, lon, 2);

        if (subscriptions.length === 0) {
            console.log(`üì¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞, –Ω–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`);
            return;
        }

        const rec = forecast.recommendation;
        const notification = {
            title: `${rec.emoji} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø–æ–ª–∏–≤—É`,
            body: rec.recommendation,
            icon: '/garden-icon.png',
            badge: '/garden-badge.png',
            tag: 'watering-alert',
            requireInteraction: false,
            data: {
                type: rec.shouldWater ? 'heat' : 'rain',
                city: forecast.city
            }
        };

        let sent = 0;
        let failed = 0;

        for (const sub of subscriptions) {
            try {
                const parsedSubscription = typeof sub.subscription === 'string'
                    ? JSON.parse(sub.subscription)
                    : sub.subscription;

                await webpush.sendNotification(
                    parsedSubscription,
                    JSON.stringify(notification)
                );
                sent++;
            } catch (error) {
                if (error.statusCode === 410) {
                    console.log(`üóëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞`);
                }
                failed++;
            }
        }

        console.log(`üì§ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${sent} —É—Å–ø–µ—à–Ω–æ, ${failed} –æ—à–∏–±–æ–∫`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
const scheduleWateringCheck = (lat, lon) => {
    const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;

    if (wateringCronTasks.has(cacheKey)) {
        return;
    }

    const timezone = getTimezoneByCoords(lat, lon);

    // –ó–∞–ø—É—Å–∫ –≤ 12:00 (–ø–æ–ª–¥–µ–Ω—å) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ü–û –ú–ï–°–¢–ù–û–ú–£ –í–†–ï–ú–ï–ù–ò
    const task = cron.schedule(
        '0 12 * * *',
        async () => {
            console.log(`‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ª–∏–≤—É –≤ 12:00 –¥–ª—è ${cacheKey}`);
            await checkAndNotifyWatering(lat, lon);
        },
        {
            timezone
        }
    );

    wateringCronTasks.set(cacheKey, task);
    console.log(`üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–ª–∏–≤–∞ –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${cacheKey} (—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone})`);
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
const stopWateringSchedule = (lat, lon) => {
    const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;

    if (wateringCronTasks.has(cacheKey)) {
        const task = wateringCronTasks.get(cacheKey);
        task.stop();
        wateringCronTasks.delete(cacheKey);
        console.log(`üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–ª–∏–≤–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${cacheKey}`);
    }
};

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ª–∏–≤—É
exports.getWateringAlert = async (req, res, next) => {
    try {
        const { latitude, longitude } = req.query;

        if (!latitude || !longitude) {
            throw new AppError('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
        }

        const lat = parseFloat(latitude);
        const lon = parseFloat(longitude);

        if (isNaN(lat) || isNaN(lon) || lat < -90 || lat > 90 || lon < -180 || lon > 180) {
            throw new AppError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã', 400);
        }

        const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (wateringAlertCache.has(cacheKey)) {
            const cached = wateringAlertCache.get(cacheKey);
            return res.json({
                ...cached,
                fromCache: true
            });
        }

        // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        const forecast = await checkAndNotifyWatering(lat, lon);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduleWateringCheck(lat, lon);

        res.json({
            ...forecast,
            fromCache: false
        });
    } catch (error) {
        next(error);
    }
};

// –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
exports.stopAllWateringSchedules = () => {
    wateringCronTasks.forEach((task) => {
        task.stop();
    });
    wateringCronTasks.clear();
    console.log('üõë –í—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –ø–æ–ª–∏–≤–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
};

exports.stopWateringSchedule = stopWateringSchedule;
exports.scheduleWateringCheck = scheduleWateringCheck;