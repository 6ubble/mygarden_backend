const axios = require('axios');
const cron = require('node-cron');
const webpush = require('web-push');
const { getSubscriptionsByCoordinates } = require('../models/pushSubscriptionModel');
const { getTomorrowNightInLocalTimezone, convertToLocalTime, getTimezoneByCoordinates } = require('../utils/timezoneUtils');
require('dotenv').config();

const OPENWEATHER_API_KEY = process.env.OPENWEATHER_API_KEY;
const FROST_THRESHOLD = 5; // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤ (0¬∞C)

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–º–æ—Ä–æ–∑–∫–∞—Ö
const frostAlertCache = new Map();

// –ê–∫—Ç–∏–≤–Ω—ã–µ cron –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
const forecastCronTasks = new Map();

class AppError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∞–º–æ–≥–æ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —á–∞—Å–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –Ω–æ—á–∏
const fetchColdestNightHour = async (lat, lon) => {
    try {
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –Ω–æ—á–∏ –≤ –õ–û–ö–ê–õ–¨–ù–û–ú —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º!)
        const nightTimes = getTomorrowNightInLocalTimezone(lat, lon);
        const timezone = getTimezoneByCoordinates(lat, lon);

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        const response = await axios.get(
            `https://api.openweathermap.org/data/2.5/forecast`,
            {
                params: {
                    lat,
                    lon,
                    appid: OPENWEATHER_API_KEY,
                    units: 'metric',
                    lang: 'ru'
                },
                timeout: 10000
            }
        );

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –Ω–æ—á–∏ (00:00-06:00 –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ª–æ–∫–∞—Ü–∏–∏)
        const nightForecasts = response.data.list.filter(item => {
            return item.dt >= nightTimes.startUnix && item.dt <= nightTimes.endUnix;
        });

        if (nightForecasts.length === 0) {
            return null;
        }

        // –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Ö–æ–ª–æ–¥–Ω—ã–π —á–∞—Å
        const coldestHour = nightForecasts.reduce((coldest, current) => {
            return current.main.temp < coldest.main.temp ? current : coldest;
        });

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ª–æ–∫–∞—Ü–∏–∏
        const localTime = convertToLocalTime(coldestHour.dt, lat, lon, 'HH:mm');

        return {
            temp: Math.round(coldestHour.main.temp),
            time: localTime,
            isFrost: coldestHour.main.temp <= FROST_THRESHOLD,
            city: response.data.city.name,
            description: coldestHour.weather[0].description,
            humidity: coldestHour.main.humidity,
            timezone,
            timestamp: Date.now()
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${error.message}`);
        throw error;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const checkAndNotifyFrost = async (lat, lon) => {
    try {
        const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
        const forecast = await fetchColdestNightHour(lat, lon);

        if (!forecast) {
            console.log(`‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–æ—á—å –¥–ª—è ${cacheKey}`);
            return null;
        }

        frostAlertCache.set(cacheKey, forecast);

        if (forecast.isFrost) {
            console.log(`üßä –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–æ—Ä–æ–∑–∫–∏ –≤ ${forecast.city}! –°–∞–º—ã–π —Ö–æ–ª–æ–¥–Ω—ã–π —á–∞—Å: ${forecast.time} (${forecast.timezone}), —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${forecast.temp}¬∞C`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            await sendFrostNotifications(forecast, lat, lon);
        } else {
            console.log(`‚úÖ –ó–∞–º–æ—Ä–æ–∑–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç. –ú–∏–Ω–∏–º—É–º –Ω–æ—á—å—é: ${forecast.temp}¬∞C –≤ ${forecast.time} (${forecast.timezone})`);
        }

        return forecast;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤: ${error.message}`);
        throw error;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const sendFrostNotifications = async (forecast, lat, lon) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ä–∞–¥–∏—É—Å–µ ~2–∫–º
        const subscriptions = await getSubscriptionsByCoordinates(lat, lon, 2);

        if (subscriptions.length === 0) {
            console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –Ω–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è ${forecast.city}`);
            return;
        }

        const notification = {
            title: `üßä –ó–∞–º–æ—Ä–æ–∑–∫–∏ –≤ ${forecast.city}!`,
            body: `–í ${forecast.time} —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–ø–∞–¥–µ—Ç –¥–æ ${forecast.temp}¬∞C. –ó–∞—â–∏—Ç–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è!`,
            icon: '/garden-icon.png',
            badge: '/garden-badge.png',
            tag: 'frost-alert',
            requireInteraction: true,
            data: {
                city: forecast.city,
                temp: forecast.temp,
                time: forecast.time
            }
        };

        let sent = 0;
        let failed = 0;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        for (const sub of subscriptions) {
            try {
                const parsedSubscription = typeof sub.subscription === 'string' 
                    ? JSON.parse(sub.subscription) 
                    : sub.subscription;

                await webpush.sendNotification(
                    parsedSubscription,
                    JSON.stringify(notification)
                );
                sent++;
            } catch (error) {
                if (error.statusCode === 410) {
                    // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º
                    console.log(`üóëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º`);
                } else {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
                }
                failed++;
            }
        }

        console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${sent} —É—Å–ø–µ—à–Ω–æ, ${failed} –æ—à–∏–±–æ–∫`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
const scheduleFrostCheck = (lat, lon) => {
    const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
    
    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞—ë–º –¥—É–±–ª–∏–∫–∞—Ç
    if (forecastCronTasks.has(cacheKey)) {
        return;
    }

    // –ó–∞–ø—É—Å–∫ –≤ 12:00 (–ø–æ–ª–¥–µ–Ω—å) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    const cronExpression = '0 12 * * *';
    
    const task = cron.schedule(cronExpression, async () => {
        console.log(`‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤ –≤ 12:00 –¥–ª—è ${cacheKey}`);
        await checkAndNotifyFrost(lat, lon);
    });

    forecastCronTasks.set(cacheKey, task);
    console.log(`üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${cacheKey}`);
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
const stopFrostSchedule = (lat, lon) => {
    const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
    
    if (forecastCronTasks.has(cacheKey)) {
        const task = forecastCronTasks.get(cacheKey);
        task.stop();
        forecastCronTasks.delete(cacheKey);
        console.log(`üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${cacheKey}`);
    }
};

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–º–æ—Ä–æ–∑–∫–∞—Ö
exports.getFrostAlert = async (req, res, next) => {
    try {
        const { latitude, longitude } = req.query;

        if (!latitude || !longitude) {
            throw new AppError('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
        }

        const lat = parseFloat(latitude);
        const lon = parseFloat(longitude);

        if (isNaN(lat) || isNaN(lon) || lat < -90 || lat > 90 || lon < -180 || lon > 180) {
            throw new AppError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã', 400);
        }

        const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (frostAlertCache.has(cacheKey)) {
            const cached = frostAlertCache.get(cacheKey);
            return res.json({
                ...cached,
                fromCache: true
            });
        }

        // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        console.log(`üåê –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è ${cacheKey}`);
        const forecast = await checkAndNotifyFrost(lat, lon);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —ç—Ç–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        scheduleFrostCheck(lat, lon);

        res.json({
            ...forecast,
            fromCache: false
        });

    } catch (error) {
        next(error);
    }
};

// –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
exports.stopAllFrostSchedules = () => {
    forecastCronTasks.forEach((task) => {
        task.stop();
    });
    forecastCronTasks.clear();
    console.log('üõë –í—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
};

exports.stopFrostSchedule = stopFrostSchedule;
exports.scheduleFrostCheck = scheduleFrostCheck;
exports.checkAndNotifyFrost = checkAndNotifyFrost;