const axios = require('axios');
const cron = require('node-cron');
const moment = require('moment-timezone');
const geoTz = require('geo-tz');
require('dotenv').config();

const OPENWEATHER_API_KEY = process.env.OPENWEATHER_API_KEY;

// –ö—ç—à –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const weatherCache = new Map();

// –ê–∫—Ç–∏–≤–Ω—ã–µ cron –∑–∞–¥–∞—á–∏ (—á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)
const cronTasks = new Map();

class AppError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã —É OpenWeatherMap
const fetchFromOpenWeatherMap = async (lat, lon) => {
    try {
        const response = await axios.get(
            `https://api.openweathermap.org/data/2.5/weather`,
            {
                params: {
                    lat,
                    lon,
                    appid: OPENWEATHER_API_KEY,
                    units: 'metric',
                    lang: 'ru'
                },
                timeout: 10000
            }
        );

        return {
            temp: Math.round(response.data.main.temp),
            description: response.data.weather[0].main,
            humidity: response.data.main.humidity,
            windSpeed: Math.round(response.data.wind.speed * 10) / 10,
            icon: response.data.weather[0].icon,
            city: response.data.name,
            timestamp: Date.now()
        };
    } catch (error) {
        if (error.response?.status === 401) {
            throw new AppError('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenWeatherMap', 500);
        } else if (error.response?.status === 404) {
            throw new AppError('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 404);
        } else if (error.code === 'ECONNABORTED') {
            throw new AppError('Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenWeatherMap', 504);
        }
        throw error;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à
const updateWeatherCache = async (lat, lon) => {
    try {
        const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
        const weatherData = await fetchFromOpenWeatherMap(lat, lon);
        
        weatherCache.set(cacheKey, {
            data: weatherData,
            timestamp: Date.now()
        });
        
        console.log(`‚úÖ –ü–æ–≥–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${cacheKey} –≤ ${new Date().toLocaleTimeString('ru-RU')}`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: ${error.message}`);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã
const scheduleWeatherUpdates = (lat, lon) => {
    const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
    
    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞—ë–º –¥—É–±–ª–∏–∫–∞—Ç
    if (cronTasks.has(cacheKey)) {
        return;
    }

    // –ó–∞–ø—É—Å–∫ –≤ 6:00, 12:00, 18:00, 24:00 (00:00) –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    const cronExpression = '0 6,12,18,0 * * *';
    
    const task = cron.schedule(cronExpression, async () => {
        await updateWeatherCache(lat, lon);
    });

    cronTasks.set(cacheKey, task);
    console.log(`üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${cacheKey}`);
    
    // –¢–∞–∫–∂–µ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    updateWeatherCache(lat, lon);
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
const stopWeatherSchedule = (lat, lon) => {
    const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
    
    if (cronTasks.has(cacheKey)) {
        const task = cronTasks.get(cacheKey);
        task.stop();
        cronTasks.delete(cacheKey);
        console.log(`üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${cacheKey}`);
    }
};

exports.getWeather = async (req, res, next) => {
    try {
        const { latitude, longitude } = req.query;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if (!latitude || !longitude) {
            throw new AppError('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
        }

        const lat = parseFloat(latitude);
        const lon = parseFloat(longitude);

        if (isNaN(lat) || isNaN(lon) || lat < -90 || lat > 90 || lon < -180 || lon > 180) {
            throw new AppError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã', 400);
        }

        const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (weatherCache.has(cacheKey)) {
            const cached = weatherCache.get(cacheKey);
            console.log(`üì¶ –ü–æ–≥–æ–¥–∞ –∏–∑ –∫—ç—à–∞ –¥–ª—è ${cacheKey}`);
            
            return res.json({
                ...cached.data,
                fromCache: true
            });
        }

        // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        console.log(`üåê –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è ${cacheKey}`);
        const weatherData = await fetchFromOpenWeatherMap(lat, lon);
        
        weatherCache.set(cacheKey, {
            data: weatherData,
            timestamp: Date.now()
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —ç—Ç–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        scheduleWeatherUpdates(lat, lon);

        res.json({
            ...weatherData,
            fromCache: false
        });

    } catch (error) {
        next(error);
    }
};

// –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
exports.stopAllSchedules = () => {
    cronTasks.forEach((task) => {
        task.stop();
    });
    cronTasks.clear();
    console.log('üõë –í—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
};

exports.stopWeatherSchedule = stopWeatherSchedule;
exports.scheduleWeatherUpdates = scheduleWeatherUpdates;