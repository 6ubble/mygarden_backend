const webpush = require('web-push');
const { savePushSubscription, deleteSubscription } = require('../models/pushSubscriptionModel');
require('dotenv').config();

// –£—Å—Ç–∞–Ω–æ–≤–∏ VAPID –∫–ª—é—á–∏ (—Å–º. –Ω–∏–∂–µ –∫–∞–∫ –∏—Ö –ø–æ–ª—É—á–∏—Ç—å)
const vapidPublicKey = process.env.VAPID_PUBLIC_KEY;
const vapidPrivateKey = process.env.VAPID_PRIVATE_KEY;

if (vapidPublicKey && vapidPrivateKey) {
    webpush.setVapidDetails(
        process.env.VAPID_SUBJECT || 'mailto:example@domain.com',
        vapidPublicKey,
        vapidPrivateKey
    );
}

class AppError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å push –ø–æ–¥–ø–∏—Å–∫—É
exports.subscribePush = async (req, res, next) => {
    try {
        const { subscription, latitude, longitude } = req.body;
        const userId = req.user.id;

        if (!subscription || !subscription.endpoint) {
            throw new AppError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', 400);
        }

        await savePushSubscription(userId, subscription, latitude, longitude);

        res.json({ 
            message: 'Push –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
            subscribed: true 
        });
    } catch (error) {
        next(error);
    }
};

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
exports.sendTestNotification = async (req, res, next) => {
    try {
        const subscription = req.body.subscription;

        if (!subscription || !subscription.endpoint) {
            throw new AppError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', 400);
        }

        const notification = {
            title: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            body: 'Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!',
            icon: '/garden-icon.png',
            badge: '/garden-badge.png'
        };

        await webpush.sendNotification(
            subscription,
            JSON.stringify(notification)
        );

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        res.json({ message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
    } catch (error) {
        if (error.statusCode === 410) {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞
            console.log('üóëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º');
            // –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î
        }
        next(error);
    }
};

// –ü–æ–ª—É—á–∏—Ç—å VAPID –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
exports.getVapidPublicKey = (req, res) => {
    if (!vapidPublicKey) {
        return res.status(500).json({ 
            error: 'VAPID –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' 
        });
    }

    res.json({ 
        vapidPublicKey 
    });
};

module.exports.webpush = webpush;