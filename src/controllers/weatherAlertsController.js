const axios = require('axios');
const cron = require('node-cron');
const webpush = require('web-push');
const { getSubscriptionsByCoordinates } = require('../models/pushSubscriptionModel');
const { getTomorrowNightInLocalTimezone, convertToLocalTime, getTimezoneByCoordinates } = require('../utils/timezoneUtils');
const { checkHeatWarning, checkRainWarning, getWateringRecommendation } = require('../utils/weatherAlertsUtils');
require('dotenv').config();

const OPENWEATHER_API_KEY = process.env.OPENWEATHER_API_KEY;
const FROST_THRESHOLD = 0;

// –ö—ç—à –¥–ª—è –≤—Å–µ—Ö alert'–æ–≤
const alertsCache = new Map();

// –ê–∫—Ç–∏–≤–Ω—ã–µ cron –∑–∞–¥–∞—á–∏
const alertsCronTasks = new Map();

class AppError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
}

// –ï–î–ò–ù–´–ô –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö alert'–æ–≤
const fetchAllAlertsData = async (lat, lon) => {
    try {
        const timezone = getTimezoneByCoordinates(lat, lon);

        // –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ —Ç—Ä—ë—Ö!
        const response = await axios.get(
            `https://api.openweathermap.org/data/2.5/forecast`,
            {
                params: {
                    lat,
                    lon,
                    appid: OPENWEATHER_API_KEY,
                    units: 'metric',
                    lang: 'ru'
                },
                timeout: 10000
            }
        );

        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –Ω–æ—á–∏ –∏ –¥–Ω—è
        const now = new Date();
        
        // –ù–æ—á—å: 00:00 - 06:00
        const nightStart = new Date(now);
        nightStart.setDate(nightStart.getDate() + 1);
        nightStart.setHours(0, 0, 0, 0);
        const nightEnd = new Date(nightStart);
        nightEnd.setHours(6, 0, 0, 0);
        
        // –í–µ—Å—å –¥–µ–Ω—å: 00:00 - 23:59
        const dayStart = new Date(nightStart);
        const dayEnd = new Date(dayStart);
        dayEnd.setHours(23, 59, 59, 999);

        const nightStartUnix = Math.floor(nightStart.getTime() / 1000);
        const nightEndUnix = Math.floor(nightEnd.getTime() / 1000);
        const dayStartUnix = Math.floor(dayStart.getTime() / 1000);
        const dayEndUnix = Math.floor(dayEnd.getTime() / 1000);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const nightForecasts = response.data.list.filter(item => 
            item.dt >= nightStartUnix && item.dt <= nightEndUnix
        );

        const dayForecasts = response.data.list.filter(item => 
            item.dt >= dayStartUnix && item.dt <= dayEndUnix
        );

        if (nightForecasts.length === 0 || dayForecasts.length === 0) {
            return null;
        }

        // ======== –ó–ê–ú–û–†–û–ó–ö–ò (–Ω–æ—á—å) ========
        const coldestHour = nightForecasts.reduce((coldest, current) => {
            return current.main.temp < coldest.main.temp ? current : coldest;
        });
        const frostLocalTime = convertToLocalTime(coldestHour.dt, lat, lon, 'HH:mm');

        // ======== –ñ–ê–†–ê –ò –î–û–ñ–î–¨ (–¥–µ–Ω—å) ========
        const heat = checkHeatWarning(dayForecasts);
        const rain = checkRainWarning(dayForecasts);
        const wateringRec = getWateringRecommendation(heat, rain);

        return {
            city: response.data.city.name,
            timezone,
            timestamp: Date.now(),
            
            // –ó–∞–º–æ—Ä–æ–∑–∫–∏
            frost: {
                temp: Math.round(coldestHour.main.temp),
                time: frostLocalTime,
                isFrost: coldestHour.main.temp <= FROST_THRESHOLD,
                description: coldestHour.weather[0].description,
                humidity: coldestHour.main.humidity
            },

            // –ñ–∞—Ä–∞ –∏ –¥–æ–∂–¥—å
            heat,
            rain,
            watering: wateringRec
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ alert'–æ–≤: ${error.message}`);
        throw error;
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö alert'–æ–≤
const checkAndNotifyAllAlerts = async (lat, lon) => {
    try {
        const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;
        const alerts = await fetchAllAlertsData(lat, lon);

        if (!alerts) {
            console.log(`‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è ${cacheKey}`);
            return null;
        }

        alertsCache.set(cacheKey, alerts);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (alerts.frost.isFrost) {
            console.log(`üßä –ó–ê–ú–û–†–û–ó–ö–ò: –í ${alerts.city} –Ω–æ—á—å—é ${alerts.frost.time} —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${alerts.frost.temp}¬∞C`);
        }

        if (alerts.rain.isRain) {
            console.log(`üåßÔ∏è –î–û–ñ–î–¨: –í ${alerts.city} –∑–∞–≤—Ç—Ä–∞ ${alerts.rain.totalRain}–º–º –æ—Å–∞–¥–∫–æ–≤`);
        } else if (alerts.heat.isHeat) {
            console.log(`‚òÄÔ∏è –ñ–ê–†–ê: –í ${alerts.city} –∑–∞–≤—Ç—Ä–∞ –¥–æ ${alerts.heat.maxTemp}¬∞C`);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–º
        await sendAllNotifications(alerts, lat, lon);

        return alerts;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ alert'–æ–≤: ${error.message}`);
        throw error;
    }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const sendAllNotifications = async (alerts, lat, lon) => {
    try {
        const subscriptions = await getSubscriptionsByCoordinates(lat, lon, 2);

        if (subscriptions.length === 0) {
            console.log(`üì¢ Alert'—ã –≥–æ—Ç–æ–≤—ã, –Ω–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`);
            return;
        }

        // –°–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notifications = [];

        if (alerts.frost.isFrost) {
            notifications.push({
                title: `üßä –ó–∞–º–æ—Ä–æ–∑–∫–∏ –≤ ${alerts.city}!`,
                body: `–í ${alerts.frost.time} —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–ø–∞–¥–µ—Ç –¥–æ ${alerts.frost.temp}¬∞C. –ó–∞—â–∏—Ç–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è!`,
                tag: 'frost-alert',
                requireInteraction: true
            });
        }

        if (alerts.watering.recommendation) {
            notifications.push({
                title: `${alerts.watering.emoji} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø–æ–ª–∏–≤—É`,
                body: alerts.watering.recommendation,
                tag: 'watering-alert',
                requireInteraction: false
            });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let sent = 0;
        let failed = 0;

        for (const sub of subscriptions) {
            try {
                const parsedSubscription = typeof sub.subscription === 'string'
                    ? JSON.parse(sub.subscription)
                    : sub.subscription;

                for (const notif of notifications) {
                    await webpush.sendNotification(
                        parsedSubscription,
                        JSON.stringify({
                            ...notif,
                            icon: '/garden-icon.png',
                            badge: '/garden-badge.png',
                            data: { city: alerts.city }
                        })
                    );
                }
                sent += notifications.length;
            } catch (error) {
                if (error.statusCode === 410) {
                    console.log(`üóëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞`);
                }
                failed += notifications.length;
            }
        }

        console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent} —É—Å–ø–µ—à–Ω–æ, ${failed} –æ—à–∏–±–æ–∫`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
    }
};

// –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
const scheduleAlertsCheck = (lat, lon) => {
    const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;

    if (alertsCronTasks.has(cacheKey)) {
        return;
    }

    const timezone = getTimezoneByCoordinates(lat, lon);

    // –û–¥–Ω–∞ cron –∑–∞–¥–∞—á–∞ –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö!
    const task = cron.schedule(
        '0 12 * * *',  // 12:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        async () => {
            console.log(`‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö alert'–æ–≤ –≤ 12:00 –¥–ª—è ${cacheKey}`);
            await checkAndNotifyAllAlerts(lat, lon);
        },
        {
            timezone
        }
    );

    alertsCronTasks.set(cacheKey, task);
    console.log(`üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ alert'–æ–≤ –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${cacheKey} (—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone})`);
};

// API endpoint - –µ–¥–∏–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö alert'–æ–≤
exports.getAllAlerts = async (req, res, next) => {
    try {
        const { latitude, longitude } = req.query;

        if (!latitude || !longitude) {
            throw new AppError('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
        }

        const lat = parseFloat(latitude);
        const lon = parseFloat(longitude);

        if (isNaN(lat) || isNaN(lon) || lat < -90 || lat > 90 || lon < -180 || lon > 180) {
            throw new AppError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã', 400);
        }

        const cacheKey = `${Math.round(lat * 100) / 100},${Math.round(lon * 100) / 100}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (alertsCache.has(cacheKey)) {
            const cached = alertsCache.get(cacheKey);
            return res.json({
                ...cached,
                fromCache: true
            });
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        const alerts = await checkAndNotifyAllAlerts(lat, lon);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduleAlertsCheck(lat, lon);

        res.json({
            ...alerts,
            fromCache: false
        });
    } catch (error) {
        next(error);
    }
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
exports.stopAllAlertsSchedules = () => {
    alertsCronTasks.forEach((task) => {
        task.stop();
    });
    alertsCronTasks.clear();
    console.log('üõë –í—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ alert\'–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
};

exports.scheduleAlertsCheck = scheduleAlertsCheck;